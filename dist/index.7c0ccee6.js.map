{"mappings":"AAAA,qGAAqG;AAErG,wFAAwF;AACxF,yEAAyE;AACzE,4FAA4F;AAC5F,MAAM,UAAU,MAAM,aAAa,CAAC,MAAK;IAAC,IAAG;AAAS,GAAE;AAExD,MAAM,OAAO,SAAS,UAAU,CAAC,SAAS,cAAc,CAAC;AAEzD,oDAAoD;AACpD,KAAK,MAAM,CAAC;AAEZ,8CAA8C;AAE9C;;;;;;AAMA,GAEA,sCAAsC;AACtC,MAAM,SAAQ,MAAM,aAAa,CAAC,OAAM;IAAC,IAAG;AAAQ,GAAE,MAAM,aAAa,CAAC,OAAM;IAAC,IAAG;AAAO,GAAE,MAAM,aAAa,CAAC,MAAK,CAAC,GAAE;AAEzH,+CAA+C;AAC/C,KAAK,MAAM,CAAC;AAEZ,oKAAoK;AAEpK;;;;;;;AAOA,GAEA,MAAM,UAAS,MAAM,aAAa,CAChC,OAAM;IAAC,IAAG;AAAQ,GAClB,MAAM,aAAa,CACjB,OAAM;IAAC,IAAG;AAAO,GACjB;IAAC,MAAM,aAAa,CAAC,MAAK,CAAC,GAAE;IAAe,MAAM,aAAa,CAAC,MAAK,CAAC,GAAE;CAAe;AAE3F,KAAK,MAAM,CAAC;AAEZ,0DAA0D;AAC1D,oDAAoD;AAEpD,gDAAgD;AAChD,sCAAsC;AACtC,4DAA4D;AAC5D,mDAAmD;AACnD,KAAK,MAAM,CAAC,SAEZ,gEAAgE","sources":["app.js"],"sourcesContent":["// attributes for h1 here can be given in the 2nd parameter, object as comma separated key-value pair\r\n\r\n// 3rd element here is known as the children and both the 2nd and 3rd comes under props.\r\n// this heading returns an obj created by react with a lot of properties.\r\n// heading can be treated as a react element which becomes HTML that the browser understands\r\nconst heading = React.createElement(\"h1\",{id:\"heading\"},\"Hello World from React\");\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// this line puts the obj created earlier in the DOM\r\nroot.render(heading);\r\n\r\n// creating nested elements using above method\r\n\r\n/*\r\n<div id=\"parent\">\r\n  <div id=\"child\">\r\n    <h1>I'm H1 tag!</h1>\r\n  </div>\r\n</div>\r\n*/\r\n\r\n// creating the above HTML structuring\r\nconst parent= React.createElement(\"div\",{id:\"parent\"},React.createElement(\"div\",{id:\"child\"},React.createElement(\"h1\",{},\"I'm h1 tag!\")));\r\n\r\n// rendering the above react element to the DOM\r\nroot.render(parent);\r\n\r\n// now, if we want to create more than 1 child ie, give details for more than 1 child in the 3rd parameter, then we can pass an array for creating sibling elements.\r\n\r\n/*\r\n<div id=\"parent\">\r\n  <div id=\"child\">\r\n    <h1>I'm H1 tag!</h1>\r\n    <h2>I'm H2 tag!</h2>\r\n  </div>\r\n</div>\r\n*/\r\n\r\nconst parent2= React.createElement(\r\n  \"div\",{id:\"parent\"},\r\n  React.createElement(\r\n    \"div\",{id:\"child\"},\r\n    [React.createElement(\"h1\",{},\"I'm h1 tag!\"),React.createElement(\"h2\",{},\"I'm h2 tag!\")]));\r\n\r\nroot.render(parent2);\r\n\r\n// Now this is getting complex, hence JSX comes into play.\r\n// But this is how core react works (as shown above)\r\n\r\n// this render would overwrite the above render.\r\n// applicable to all the other renders\r\n// will replace html content also, if exists under the root.\r\n// also, only the contents of root will be replaced\r\nroot.render(parent);\r\n\r\n// we wrote the above code without using that npm react and all."],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}